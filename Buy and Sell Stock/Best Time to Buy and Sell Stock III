123. Best Time to Buy and Sell Stock III
Hard

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Example 4:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105






Approach:

calculate from left to right max profit and from right to left and then find the max of the sums


Solution:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int n=prices.size(),j;
        if(n<2) return 0;
        vector<int>profit1(n),profit2(n);
        int minp=prices[0],maxp=prices[n-1];
        profit2[n-1]=0;
        profit1[0]=0;
        for(int i=1;i<n;i++)
        {
            minp=min(prices[i],minp);
            profit1[i]=max(profit1[i-1],prices[i]-minp);
            
            j=n-i-1;
            maxp=max(prices[j],maxp);
            profit2[j]=max(profit2[j+1],maxp-prices[j]);
        }
        
        int ans=0;
        for(int i=0;i<n;i++)
        ans=max(ans,profit1[i]+profit2[i]);
       
        
        return ans;
        
    }
};
